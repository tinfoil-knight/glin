// Code generated by "make codegen"; DO NOT EDIT.
package main

type ExprVisitor interface {
	visitBinaryExpr(*Binary) interface{}
	visitGroupingExpr(*Grouping) interface{}
	visitLiteralExpr(*Literal) interface{}
	visitUnaryExpr(*Unary) interface{}
	visitVariableExpr(*Variable) interface{}
}

type Expr interface {
	accept(ExprVisitor) interface{}
}

type Binary struct {
	left     Expr
	operator Token
	right    Expr
}

func (b *Binary) accept(visitor ExprVisitor) interface{} {
	return visitor.visitBinaryExpr(b)
}

type Grouping struct {
	expression Expr
}

func (g *Grouping) accept(visitor ExprVisitor) interface{} {
	return visitor.visitGroupingExpr(g)
}

type Literal struct {
	value interface{}
}

func (l *Literal) accept(visitor ExprVisitor) interface{} {
	return visitor.visitLiteralExpr(l)
}

type Unary struct {
	operator Token
	right    Expr
}

func (u *Unary) accept(visitor ExprVisitor) interface{} {
	return visitor.visitUnaryExpr(u)
}

type Variable struct {
	name Token
}

func (v *Variable) accept(visitor ExprVisitor) interface{} {
	return visitor.visitVariableExpr(v)
}
